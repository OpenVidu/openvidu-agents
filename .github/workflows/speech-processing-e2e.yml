name: Speech Processing agent E2E tests
on:
  workflow_dispatch:
    inputs:
      ref-openvidu-agents:
        description: "Branch, tag or commit SHA to checkout in repository OpenVidu/openvidu-agents"
        required: false
        default: ""
      ref-openvidu-local-deployment:
        description: "Branch, tag or commit SHA to checkout in repository OpenVidu/openvidu-local-deployment. Defaults to 'development'"
        type: string
        required: false
        default: "development"
      ref-openvidu:
        description: "Branch, tag or commit SHA to checkout in repository OpenVidu/openvidu. Defaults to 'master'"
        type: string
        required: false
        default: "master"
      docker-tag-agent-speech-processing:
        description: "Docker tag for agent-speech-processing contanier. If not provided, the container will be built from the repository sources"
        type: string
        required: false
      rtc-engine:
        description: "RTC engine to use"
        type: choice
        default: "pion"
        required: true
        options:
          - mediasoup
          - pion
      ref-openvidu-pro-mediasoup:
        description: 'Branch, tag or commit SHA to checkout in repository OpenVidu/openvidu-pro-mediasoup. If "default" mediasoup-worker binary will not be compiled: artifact from latest release of OpenVidu/openvidu-pro-mediasoup will be used'
        type: string
        default: "default"
        required: true
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Checkout OpenVidu/openvidu-agents
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref-openvidu-agents || github.sha }}

      - name: Checkout OpenVidu/openvidu
        uses: actions/checkout@v4
        with:
          repository: OpenVidu/openvidu
          ref: ${{ inputs.ref-openvidu || 'master' }}
          path: openvidu

      - name: Build agent-speech-processing Docker container
        if: inputs.docker-tag-agent-speech-processing == ''
        run: |
          cd speech-processing
          docker build --no-cache -t openvidu/agent-speech-processing:main .

      - name: Install openvidu-testapp dependencies
        working-directory: ./openvidu/openvidu-testapp
        run: npm ci

      - name: Run openvidu-testapp
        working-directory: ./openvidu/openvidu-testapp
        run: npm start 2>&1 >> ./openvidu-testapp.log &

      - name: Setup mediasoup-worker
        if: ${{ inputs.rtc-engine == 'mediasoup' }}
        id: setup-mediasoup-worker
        uses: OpenVidu/actions/setup-mediasoup-worker@main
        with:
          ref-openvidu-pro-mediasoup: ${{ inputs.ref-openvidu-pro-mediasoup }}
          github-token: ${{ secrets.OPENVIDU_GITHUB_TOKEN }}

      - name: Setup OpenVidu Local Deployment
        uses: OpenVidu/actions/start-openvidu-local-deployment@main
        with:
          ref-openvidu-local-deployment: ${{ inputs.ref-openvidu-local-deployment || 'development' }}
          pre_startup_commands: "sed -i 's|docker_image: docker.io/openvidu/agent-speech-processing:main|docker_image: docker.io/openvidu/agent-speech-processing:${{ inputs.docker-tag-agent-speech-processing || 'main' }}|g' agent-speech-processing.yaml"
          mediasoup-worker-bin: ${{ steps.setup-mediasoup-worker.outputs.MEDIASOUP_WORKER_BIN }}
          openvidu-edition: "pro"
          rtc-engine: ${{ inputs.rtc-engine }}
          github-token: ${{ secrets.OPENVIDU_GITHUB_TOKEN }}

      - name: Run tests
        run: |
          cd test
          npm ci
          # Install Playwright browsers
          mkdir -p /tmp/ms-playwright
          PLAYWRIGHT_BROWSERS_PATH=/tmp/ms-playwright npx playwright install --with-deps chromium
          npm run test:e2e
        env:
          RUN_MODE: CI
          LOCAL_DEPLOYMENT_PATH: ../openvidu-local-deployment/pro
          PLAYWRIGHT_BROWSERS_PATH: /tmp/ms-playwright
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          GOOGLE_CREDENTIALS_INFO: ${{ secrets.GOOGLE_CREDENTIALS_INFO }}
          SARVAM_API_KEY: ${{ secrets.SARVAM_API_KEY }}
          AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
          AZURE_SPEECH_REGION: ${{ secrets.AZURE_SPEECH_REGION }}
          ASSEMBLYAI_API_KEY: ${{ secrets.ASSEMBLYAI_API_KEY }}
          GLADIA_API_KEY: ${{ secrets.GLADIA_API_KEY }}
          DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SPITCH_API_KEY: ${{ secrets.SPITCH_API_KEY }}
          SPEECHMATICS_API_KEY: ${{ secrets.SPEECHMATICS_API_KEY }}
          MISTRALAI_API_KEY: ${{ secrets.MISTRALAI_API_KEY }}
          # FAL_API_KEY: ${{ secrets.FAL_API_KEY }}
          # CLOVA_API_KEY: ${{ secrets.CLOVA_API_KEY }}

      - name: Publish Test Report
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: "test/test-results/ctrf-report.json"
        if: always()

      - name: Upload failed test videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-videos
          path: test/test-results/**/*.webm
          retention-days: 2

      - name: Clean up
        if: always()
        uses: OpenVidu/actions/cleanup@main
